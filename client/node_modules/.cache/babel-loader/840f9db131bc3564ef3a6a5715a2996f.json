{"ast":null,"code":"var _jsxFileName = \"/Users/mue0012/dev/react-learning/streams/client/src/components/streams/StreamEdit.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamEdit extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editStream(this.props.stream.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, \"Edit Stream\"), React.createElement(StreamForm, {\n      initialValues: {\n        title: this.props.stream.title,\n        description: this.props.stream.description\n      },\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream,\n  editStream\n})(StreamEdit);","map":{"version":3,"sources":["/Users/mue0012/dev/react-learning/streams/client/src/components/streams/StreamEdit.js"],"names":["React","connect","fetchStream","editStream","StreamForm","StreamEdit","Component","onSubmit","formValues","props","stream","id","componentDidMount","match","params","render","title","description","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,eAAxC;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,UAAN,SAAyBL,KAAK,CAACM,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAKvCC,QALuC,GAK5BC,UAAU,IAAI;AACvB,WAAKC,KAAL,CAAWN,UAAX,CAAsB,KAAKM,KAAL,CAAWC,MAAX,CAAkBC,EAAxC,EAA4CH,UAA5C;AACD,KAPsC;AAAA;;AACvCI,EAAAA,iBAAiB,GAAG;AAClB,SAAKH,KAAL,CAAWP,WAAX,CAAuB,KAAKO,KAAL,CAAWI,KAAX,CAAiBC,MAAjB,CAAwBH,EAA/C;AACD;;AAMDI,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKN,KAAL,CAAWC,MAAhB,EAAwB;AACtB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AACD,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE,oBAAC,UAAD;AACE,MAAA,aAAa,EAAE;AACbM,QAAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,MAAX,CAAkBM,KADZ;AAEbC,QAAAA,WAAW,EAAE,KAAKR,KAAL,CAAWC,MAAX,CAAkBO;AAFlB,OADjB;AAKE,MAAA,QAAQ,EAAE,KAAKV,QALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAYD;;AAzBsC;;AA2BzC,MAAMW,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAAEV,IAAAA,MAAM,EAAES,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACP,KAAT,CAAeC,MAAf,CAAsBH,EAApC;AAAV,GAAP;AACD,CAFD;;AAGA,eAAeV,OAAO,CACpBiB,eADoB,EAEpB;AAAEhB,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAFoB,CAAP,CAGbE,UAHa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchStream, editStream } from \"../../actions\";\nimport StreamForm from \"./StreamForm\";\n\nclass StreamEdit extends React.Component {\n  componentDidMount() {\n    this.props.fetchStream(this.props.match.params.id);\n  }\n\n  onSubmit = formValues => {\n    this.props.editStream(this.props.stream.id, formValues);\n  };\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div>\n        <h3>Edit Stream</h3>\n        <StreamForm\n          initialValues={{\n            title: this.props.stream.title,\n            description: this.props.stream.description\n          }}\n          onSubmit={this.onSubmit}\n        ></StreamForm>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state, ownProps) => {\n  return { stream: state.streams[ownProps.match.params.id] };\n};\nexport default connect(\n  mapStateToProps,\n  { fetchStream, editStream }\n)(StreamEdit);\n"]},"metadata":{},"sourceType":"module"}